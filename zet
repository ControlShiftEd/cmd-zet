#!/usr/bin/bash
# shellcheck disable=SC2016,SC2119,SC2120
set -e

(( BASH_VERSINFO[0] < 4 )) && echo "Bash 4+ required." && exit 1

: "${PAGER:=more}"
: "${EDITOR:=vi}"
: "${HELP_BROWSER:=}"
: "${EXE:="${0##*/}"}"
: "${GITUSER:="$USER"}"
: "${GITBRANCH:=main}"
: "${GHREPOS:="$HOME/Repos/github.com/$GITUSER"}"
: "${PRIVATE:="$HOME/Private"}"
: "${VIDEOS:="$HOME/Videos"}"
: "${PICTURES:="$HOME/Pictures"}"
: "${DOWNLOADS:="$HOME/Downloads"}"

declare -A HELP
declare -A CONFIG

_initialize() {
  : "${CONFIG[zet.private]:="$PRIVATE/zet"}"
  : "${CONFIG[zet.public]:="$GHREPOS/zet"}"
  : "${CONFIG[current]:=public}"
  : "${CONFIG[cast.directory]:="$VIDEOS/ZettelCasts"}"
  : "${CONFIG[cast.footer]:=}"
  : "${CONFIG[cast.category]:=28}"
  : "${CONFIG[downloads]:="$DOWNLOADS"}"
  : "${CONFIG[screenshots]:="$PICTURES"}"
  _config_write
}

command_downloads() {
  command_config downloads "$@"
}

command_screenshots() {
  command_config screenshots "$@"
}

command_zet.private() {
  command_config zet.private "$@"
}

command_zet.public() {
  command_config zet.public "$@"
}

command_current() {
  command_config current "$@"
}

command_cast.directory() {
  command_config cast.directory "$@"
}

command_cast.footer() {
  command_config cast.footer "$@"
}

command_cast.category() {
  command_config cast.category "$@"
}

# ------------------------- utility functions ------------------------

_newest() {
  if (( $# > 1 )); then
    local newest epoch nepoch
    for path in "$@"; do
      echo "PATH: $path" >&2
      [[ -e "$path" ]] || return 1
      nepoch=$(date -u "+%s" -r "$path")
      (( nepoch > epoch )) && epoch="$nepoch" && newest="$path"
    done
    echo "$newest"
    return 0
  fi
  IFS=$'\n'
  local -a f=($(ls -1 --color=never -trd ${1:-.}/* 2>/dev/null))
  [[ ${#f} > 0 ]] && echo "${f[-1]}"
}

# ----------------------------- commands -----------------------------

command_figure() {
  local cmd="$1"; shift || true
  case "$cmd" in 
    name) command__figure_name "$@" ;;
    screenshot) command__figure_screenshot ;;
    download) command__figure_download ;;
    latest) command__figure_latest ;;
    add) command__figure_add ;;
    '') command_find ' Figure: ' ;;
  esac
}

command__figure_screenshot() {
  _newest "${CONFIG[screenshots]}"
}

command__figure_download() {
  _newest "${CONFIG[downloads]}"
}

command__figure_latest() {
  local name image base id download screenshot prompt
  download="$(command__figure_download)" || true
  screenshot="$(command__figure_screenshot)" || true
  [[ -z "$download" && -z "$screenshot" ]] && return 1
  [[ -z "$download" && -n "$screenshot" ]] && image="$screenshot"
  [[ -n "$download" && -z "$screenshot" ]] && image="$download"
  [[ -z "$image" ]] && image=$(_newest "$download" "$screenshot")
  echo "$image"
}

command__figure_add() {
  local name image
  image="$(command__figure_latest)"
  [[ -x "$image" ]] && echo "could not find figure to add" && return 1
  name=$(command__figure_name "$image")
  [[ $name =~ F([0-9]+) ]] && id="${BASH_REMATCH[1]}"
  prompt="Move image into '${CONFIG[current]}' as figure:
  '$image'
    -> $id/$name
? (y/N) "
  printf "$prompt"
  read -r resp
  [[ $resp =~ ^[yY] ]]
  mkdir "/tmp/$id"
  mv "$image" "/tmp/$id/$name"
  echo -e "# Figure: $name\n\n![]($name)\n" > "/tmp/$id/README.md"
  command_import "/tmp/$id"
  command_edit "$id"
}

command__figure_name() {
  _checkdep identify 
  local file isosec
  file=${1##*/}
  isosec="$(date -u +%Y%m%d%H%M%S -r "$1")"
  identify -format "F${isosec}-%G.%e" "$1"
}

command_questions() { command_find '\?' ; }

command_cast() {
  ! _have yt && echo "<cast requires yt be available>" && return 1
  case "$1" in
    start) shift; command__cast_start "$@"; return $?;;
    last) shift; command__cast_last "$@"; return $?;;
    pending) shift; command__cast_pending "$@"; return $?;;
    zet) shift; command__cast_zet "$@"; return $?;;
    sync) shift; command__cast_sync "$@"; return $?;;
    uploads) shift; command__cast_uploads "$@"; return $?;;
    open) shift; yt open "$1"; return $?;;
  esac
}

command__cast_start() {
  local topic
  if _have iam; then
    topic="$(topic)"
    iam recording "$*"
  fi
  _have pomo && pomo duration 10m
  local zetid=$(command_isosec)
  mkdir "/tmp/$zetid"
  echo -e "# $*\n\n*remember to turn off music, start recording*\n\n1. Scenario\n2. Solution\n3. Steps\n4. Summary\n" > "/tmp/$zetid/README.md"
  local zetid
  zetid=$(command_import "/tmp/$zetid")
  (( $? == 0 )) && rm -rf "$zetid"
  command_edit "$zetid"
  if [[ -n "$topic" ]]; then
    t "$topic"
  fi
  _have pomo && pomo stop
  command__cast_pending_prep
}

command__cast_last() {
  _newest "${CONFIG[cast.dir]}/Pending"
}

command__cast_pending() {
  case $1 in
    ids) shift; command__cast_pending_ids "$@"; return $?;;
    prep) shift; command__cast_pending_prep "$@"; return $?;;
    dir) shift; command__cast_pending_dir "$@"; return $?;;
    post) shift; command__cast_pending_post "$@"; return $?;;
    archive) shift; command__cast_pending_archive "$@"; return $?;;
    publish) shift; command__cast_pending_publish "$@"; return $?;;
    paths) shift; command__cast_pending_paths "$@"; return $?;;
  esac
  command__cast_pending_paths "$@"
}

command__cast_pending_paths() {
	find "${CONFIG[cast.directory]}/Pending" -type f | sort
}

command__cast_pending_prep() {
	for i in $(command__cast_pending); do
    if [[ $i =~ [0-9]{14,}.mkv ]]; then
      echo Skipping $i
      continue
    fi
    local zetid
    zetid=$(command_for "$i")
    echo "$i -> $zetid.mkv" 
		mv "$i" "${CONFIG[cast.directory]}/Pending/$zetid.mkv"
	done
}

command__cast_pending_dir() {
  echo "${CONFIG[cast.directory]}/Pending"
}

command__cast_uploads() {
  case $1 in
    sync) shift; command__cast_uploads_sync "$@"; return $?;;
  esac
  while IFS= read -r line;do
    local ytid=${line%% *}
    local title=${line#* }
    [[ $title =~ ^[0-9]{14,}$ ]] || continue
    echo "$ytid"
  done < <(yt uploads 50)
}

command__cast_uploads_sync() {
  while IFS= read -r ytid;do
    command__cast_sync "$ytid"
  done < <(command__cast_uploads)
}

command__cast_pending_ids() {
  while IFS= read -r path;do
    local id=${path##*/}
    echo ${id%%.*}
  done < <(command__cast_pending)
}

command__cast_pending_post() {
  while IFS= read -r id;do
    read -u 2 -p "Tags for '$(command_title "$id")'? " -a tags
    command_post "$id" "${tags[@]}"
  done < <(command__cast_pending_ids)
}

command__cast_pending_archive() {
  while IFS= read -r path;do
    echo "$path -> ${CONFIG[cast.directory]}"
    mv "$path" "${CONFIG[cast.directory]}"
  done < <(command__cast_pending)
}

command__cast_pending_publish() {
  read -p 'Everything uploaded to YouTube from Pending? ' resp
  [[ $resp =~ ^[yY] ]] || return 1
  command__cast_uploads_sync
  command__cast_pending_post
  command__cast_pending_archive
  echo "Don't forget to activate monetization from YouTube GUI."
}

command_post() {
  _filter "$@" && return $?
  ! _have post && echo '<post command not found>' && return 1
  local zetid="$1"
  [[ $zetid = last ]] && zetid=$(command_last)
  [[ -z "$zetid" ]] && echo '<zetid required>' && return 1
  local title video tags buf
  title=$(command_title "$zetid") || (echo '<title empty>' && return 1)
  video=$(command_video "$zetid") || true
  [[ ${video:0:1} = '<' ]] && video=''
  zeturl=$(command_url "$zetid")
  shift;
  tags=($(command_tag "$zetid") $@)
  tags="${tags[@]/#/\#}"
  if [[ -n "$video" ]];then
    buf+="📺 "
  else
    buf+="📜 "
  fi
  local n=$'\n'
  buf+="$title$n$n"
  if [[ -n "$video" ]];then
    buf+="$video$n$n"
  else
    buf+="$zeturl$n$n"
  fi
  [[ -n "$tags" ]] && buf+="$tags$n"
  printf "%s\n" "$buf"
  post "$buf"
}

command__cast_zet() {
  _filter "$@" && return $?;
  local video=$(yt video "$1")
  local name=$(jq -r ".fileDetails.fileName" <<< "$video")
  local desc=$(jq -r ".snippet.description" <<< "$video")
  if [[ $desc =~ \[ZETID:([0-9]{14,})\] ]]; then
    echo "${BASH_REMATCH[1]}"
    return 0
  fi
  if [[ $name =~ ^([0-9]{14,})\.mkv ]]; then
    echo "${BASH_REMATCH[1]}"
    return 0
  fi
}

command__cast_sync() {
  local id zetid ytid
  if [[ $1 = last ]]; then
    id=$(command_last)
  else
    id="${1##*/}"
  fi
  if [[ $id =~ ^[0-9]{14,}$ ]]; then
    zetid="$id"
    ytid=$(command_video "$zetid") || true
    ytid=${ytid##*/}
  else
    ytid="$id"
    ytid=${ytid##*/}
    zetid=$(command__cast_zet "$ytid")
  fi
  local n=$'\n' foot desc
  [[ -z "$ytid" ]] && echo '<failed to lookup ytid>' && return 1
  [[ -z "$zetid" ]] && echo '<failed to lookup zetid>' && return 1
  local title=$(command_title "$zetid")
  local body=$(command_body "$zetid" codeless)
  local zeturl="https://github.com/$GITUSER/zet/tree/$GITBRANCH/$zetid"
  [[ -n "${CONFIG[cast.footer]}" ]] && \
    foot=$(command_body "${CONFIG[cast.footer]}")
  desc="$body$n$n$foot$n${n}[ZETID:$zetid]$n$zeturl"
  yt publish "$ytid" "$title" "$desc" "${CONFIG[cast.category]}"
  command_video "$zetid" "$ytid" > /dev/null
  echo "👍 synced $zetid -> https://youtu.be/$ytid"
}

command_import() {
    _filter "$@" && return $?
    local dir
    dir="$(command_dir)"
    [[ ! -d "$1" ]] && return 1
    mv "$1" "$dir"
    command_commit "${1##*/}" &>/dev/null
    echo "${1##*/}"
}

command_delete() {
    _filter "$@" && return $?
    local dir
    dir="$(command_dir)"
    local zetid="$1"
    [[ $zetid = last ]] && zetid=$(command_last)
    if [[ ! -d "$dir/$zetid" ]]; then
        echo "Does not exist '$zetid'"
        return 1
    fi
    rm -rf "${dir:?"missing zet directory"}/$zetid"
    echo "Deleted $dir/$zetid"
    cd "$dir" &>/dev/null
    git add -A "$dir/$zetid" &>/dev/null
    git commit -m "Deleted $zetid" &>/dev/null || true
    git push &>/dev/null
    cd - &>/dev/null
}

command_find() { command_titles | grep -iP "$1"; }

command_chat() {
  _filter "$@" && return $?
  _have chat || return 1
  chat <<< "$(command_url "$1")"
}

command_url() {
  _filter "$@" && return $?
  local zetid="$1"
  [[ -z "$zetid" || $zetid = last ]] && zetid=$(command_last)
  echo "https://github.com/$GITUSER/zet/tree/$GITBRANCH/$zetid"
}

_select_zet() {
  local -a zets=("${!CONFIG[@]}")
  zets=($(_reduce zets ^zet.))
  select prefix in "${zets[@]#zet.}";do
    echo "$prefix"
    return 0
  done
}

command_use() {
  local prefix="$1"
  [[ -z "$prefix" ]] && prefix=$(_select_zet)
  while IFS= read -r line; do
    if [[ $line =~ ^zet\.($prefix.*) ]];then
      _config_set current "${BASH_REMATCH[1]}"
      command_current
      return 0
    fi
  done < <(printf "%s\n" "${!CONFIG[@]}")
  return 1
}

command_current() { echo "${CONFIG[current]}"; }

command_open() { 
  ! _have open && echo '<open not found>' && return 1
  open "$(command_url "$@")"
}

command_commit() {
  _filter "$@" && return $?

  # if no zet, bail
  local dir
  dir="$(command_dir)/$1"
  local readme="$dir/README.md"
  [[ ! -r $readme ]] && echo "<not found: $1>" && return 1

  # git commit keeping title as commit message 
  local title
  title=$(command_title "$1")
  cd "$dir"
  git add -A "$dir"
  git commit -m "$title"
  git push
  cd -

}

command_video() {
  _filter "$@" && return $?

  # accept zet or yt ids  
  local zetid ytid changed
  if [[ $1 =~ ^[0-9]{14,}$ ]]; then
    zetid="$1"
    ytid="${2##*/}"
  elif [[ $1 = last ]]; then
    zetid=$(command_last)
    ytid="${2##*/}"
  else
    ytid="${1##*/}"
    zetid=$(zet cast zet "$1")
  fi

  # if no zet, bail
  local dir readme
  dir="$(command_dir)/$zetid"
  readme="$dir/README.md"
  [[ ! -r "$readme" ]] && echo "<not found: $zetid/$ytid>" && return 1

  # if zet has vid line...
  if [[ $(sed '3q;d' "$readme") =~ ^📺\ \<https://youtu.be/(.*)\> ]]; then

    # update if ytid 
    if [[ -n "$ytid" ]]; then
      # FIXME following needs to be non-provider specific
      echo -e "3c\n📺 <https://youtu.be/$ytid>\n.\nwq" | ed "$readme" >/dev/null
      changed=1

    # read it to print later
    else
      ytid=${BASH_REMATCH[1]}
    fi

  # zet does not have vid line
  else

    # so add it if have video id
    if [[ -n "$ytid" ]]; then
      echo -e "2a\n📺 <https://youtu.be/$ytid>\n\n.\nwq" | ed "$readme" >/dev/null
      changed=1
    fi
  fi

  # always print the url to the video id
  if [[ -n "$ytid" ]]; then
    echo "https://youtu.be/$ytid"
    [[ $changed = 1 ]] && command_commit "$zetid"
  else
    echo "<no video found in $zetid>"
    return 1
  fi
}

command_urlencode() {
  _filter "$@" && return $?
  local string="$*"
  local strlen=${#string}
  local encoded=""
  local pos c o
  for ((pos = 0; pos < strlen; pos++)); do
    c=${string:$pos:1}
    case "$c" in
    [-_.~a-zA-Z0-9]) o="${c}" ;;
    *) printf -v o '%%%02x' "'$c'" ;;
    esac
    encoded+="${o}"
  done
  echo "${encoded}"
}

command_isosec() { date -u +%Y%m%d%H%M%S "$@"; }
command_isonan() { date -u +%Y%m%d%H%M%S%N "$@"; }

command_dir() {
  local id="$1"
  [[ $id = last ]] && id=$(command_last)
  local dir="${CONFIG[zet."${CONFIG[current]}"]}"
  [[ -n "$id" ]] && dir="$dir/$id"
  [[ -d "$dir" ]] && echo "$dir"
}

command_create() {
  local title="$*"
  local dir readme
  dir="$(command_dir)/$(command_isosec)"
  readme="$dir/README.md"
  mkdir -p "$dir"
  printf "# %s\n\n" "$title" > "$readme"
  "${EDITOR:-vim}" "$readme"
  cd "$dir" &>/dev/null
  [[ -s "$dir/README.md" ]] || return 1
  line=$(head -1 "$dir/README.md" | sed 's/#\+ *//')
  test -n "$line"
  echo "Committing: $line"
  git add -A "$dir" &>/dev/null
  git commit -m "$line" &>/dev/null
  git push &>/dev/null
}

command_edit() {
  local dir zetid
  if [[ $1 =~ ^[0-9]{14,}$ ]]; then
    zetid="$1"
    dir="$(command_dir)/$1"
  elif [[ $1 = last ]]; then
      zetid="$(command_last)"
    dir="$(command_dir)/$zetid"
  else
    zetid=$(yt zet "$1")
    if [[ -z "$zetid" ]]; then
      echo "Unable to determine zet id for $1"
      return 1
    fi
    dir="$(command_dir)/$zetid"
  fi
  local readme="$dir/README.md"
  [[ ! -r "$readme" ]] && echo "Not found." && return 1
  "${EDITOR:-vim}" "$readme"
  read -r -p "Commit? " resp
  [[ $resp =~ ^[yY] ]] && command_commit "$zetid"
}

command_dex() {
  case $1 in 
    titles) shift;command__dex_titles "$@"; return $?;;
    tags) shift;command__dex_tags "$@"; return $?;;
  esac
}

command_titles() { command__dex_titles; }

command__dex_titles() {
  local dir title
  dir=$(command_dir)
  echo $dir
  while IFS= read -u 7 -r d; do
    local id=${d##*/}
    [[ -r "$d/README.md" ]] || continue
    IFS= read -r title < "$d/README.md"
    [[ $title =~ ^#\  ]] || title="<untitled>"
    title="${title#*# }"
    echo "$id $title"
  done 7< <(find "$dir" -maxdepth 2 -type d -path '*/2*'|sort)
}

command_changes() {
  mapfile -t < <(
    TZ=Z \
    find "${CONFIG[zet."${CONFIG[current]}"]}" \
    -maxdepth 2 \
    -type d \
    -path '*/2*' \
    -printf "%CY%Cm%Cd%CH%CM%CS %f\n" \
    | sort -rn
  )
  for i in "${MAPFILE[@]}"; do
    echo "${i%%.*} ${i##* }"
  done
}

command__mark_link() {
  _filter "$@" && return $?;
  local id="${1%% *}"
  #TODO have it see $* as well
  local title="${1#* }"
  [[ -z "$title" ]] && title=$(command_title "$1")
  echo "* [$id](/$id/) $title"
}

command__mark_url() {
  _filter "$@" && return $?;
  local id="${1%% *}"
  #TODO have it see $* as well
  local title="${1#* }"
  [[ -z "$title" ]] && title=$(command_title "$1")
  echo "* [$id]($(command_url "$id")) $title"
}

command_mark() {
  case $1 in 
    url) shift;command__mark_url "$@"; return $?;;
    link) shift;command__mark_link "$@"; return $?;;
  esac
}

command_last() {
  mapfile titles < <(command_titles)
  local last=${#titles[@]}
  echo "${titles[$last-1]%% *}"
}

command_text() {
  _filter "$@" && return $?
  local dir readme
  dir="$(command_dir)/$1"
  readme="$dir/README.md"
  [[ -r "$readme" ]] || return 1
  local buf
  if [[ $2 = codeless ]];then
    buf=$(command_codeless "$1")
  else
    buf=$(<"$readme")
  fi
  command -v pandoc &>/dev/null \
    || (echo "'$EXE text' requires pandoc" && return 1)
  pandoc -f gfm -t plain --wrap=none <<< "$buf"
}

command_source() {
  _filter "$@" && return $?
  local dir readme
  dir="$(command_dir)/$1"
  readme="$dir/README.md"
  [[ -r "$readme" ]] || return 1
  echo "$(<"$readme")"
}

command_title() {
  _filter "$@" && return $?
  local id="$1"
  [[ $id = last ]] && id=$(command_last)
  local dir readme title
  dir="$(command_dir)/$id"
  [[ -d $dir ]] || return 1
  readme="$dir/README.md"
  read -r title < "$readme"
  [[ ! $title =~ ^#\  ]] && return 1
  pandoc -f gfm -t plain --wrap=none <<< "${title#\# }"
}

command_tags() { command__dex_tags; }

command__dex_tags() {
  local buf tags n=$'\n'
  mapfile -t ids < <(command_ids)
  for i in "${ids[@]}";do
    mapfile -t tags < <(command_tag "$i")
    (( ${#tags[@]} > 0 )) || continue
    buf+="$i ${tags[*]}$n"
  done
  echo -n "$buf"
}

command_tag() {
  _filter "$@" && return $?
  local id="$1"
  [[ $id = last ]] && id=$(command_last)
  local dir readme tags
  dir="$(command_dir)/$id"
  [[ -d $dir ]] || return 1
  readme="$dir/README.md"
  [[ -r $readme ]] || return 1
  #TODO if more than first argument assume want to set
  tag=$(tail -1 "$readme")
  [[ $tag =~ ^\ {4,}(#.+) ]] || return 0
  echo "${BASH_REMATCH[1]//#/}"
}

command_daemon() {
  while true; do
    sleep
  done
}

command_body() {
  _filter "$@" && return $?
  local dir readme title buf eol
  dir="$(command_dir)/$1"
  [[ -d $dir ]] || return 1
  readme="$dir/README.md"
  if [[ $2 = codeless ]];then
    buf=$(command_codeless "$1")
  else
    buf=$(<"$readme")
  fi
  eol=$'\n'
  [[ $buf =~ ^\#\  ]] && buf=${buf#*$eol$eol} 
  buf=${buf#📺 *$eol$eol}
  pandoc -f gfm -t plain --wrap=none <<< "$buf"
}

command_query() {
  _filter "$@" && return $?
  [[ -z "$1" ]] && echo "Missing search query." && return 1
  term="$*"
  it="https://github.com/$GITUSER/$EXE/search?q=$(command_urlencode "$term")"
  echo "[$term]: <$it>"
  command -v chat &>/dev/null && chat "$it"
}

command_ids() {
  while read -r line; do
    echo "${line##*/}"
  done < <(find "$(command_dir)" -maxdepth 2 -type d -path '*/2*'| sort)
}

command_before() {
  _filter "$@" && return $?
  local prev
  while read -r cur; do
    (( cur > id )) && break
    prev=$cur
  done < <(command_ids)
  echo "$prev"
}

command_for() {
  _filter "$@" && return $?
  local mkv id
  mkv="$1"
  [[ $mkv == last ]] && mkv=$(mkvlast)
  [[ $mkv =~ - ]] && mkv=$(mkv2isosec "$mkv")
  id=${mkv##*/}
  id=${id%.mkv}
  command_before "$id"
}

command_after() {
  _filter "$@" && return $?
  local id="$1"
  while read -r cur; do
    (( cur > id )) && break
  done < <(command_ids)
  echo "$cur"
}

command_id() {
    _filter "$@" && return $?
    echo would id
}

command_codeless() {
  _filter "$@" && return $?
  local incode=no
  while IFS= read -r line; do
    if [[ ${line:0:3} = '```' ]]; then
      if [[ $incode = yes ]]; then
        incode=no
        continue
      else
        incode=yes
        echo "[code snipped]"
        continue
      fi
    fi
    [[ $incode = yes ]] && continue
    echo "$line"
  done < <(command_source "$@")
}

############################## BOILERPLATE ###########################
## Everything from here to the end of file can be snipped and updated
## with latest from https://github.com/rwxrob/template-bash-command.

# -------------------------- utility command -------------------------

HELP[usage]='Displays a summary of usage.'

command_usage() {
  local -a cmds
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:1} =~ _ ]] && continue
    cmds+=("$c")
  done
  local IFS='|'
  printf "usage: %s (%s)\n" "$EXE" "${cmds[*]}"
}

# --------------------------- help command ---------------------------

HELP[help]='

```
'"$EXE"' help [COMMAND]
```

Displays specific help information. If no argument is passed displays
general help information (main). Otherwise, the documentation for the
specific argument keyword is displayed, which usually corresponds to
a COMMAND name (but not necessarily). All documentation is written in
GitHub Flavored Markdown and will displayed as a web page if `pandoc`
and `$HELP_BROWSER` are detected, otherwise, just the Markdown is sent
to `$PAGER` (default: more).

Also see `readme` and `usage` commands.
'

command_help() { 
  local name="${1:-main}" title body
  title=$(_help_title "$name") || true
  if [[ -z "$title" ]]; then
    body="${HELP[$name]}"
    title="$EXE $name"
    [[ $name = main ]] && title="$EXE"
  else
    body="${HELP[$name]}"
    body=${body#*$title}
  fi
  local file="/tmp/help-$EXE-$name.html"
  if _have pandoc ; then
    if _have "$HELP_BROWSER" && [[ -t 1 ]] ;then
      pandoc -f gfm -s --metadata title="$title" \
        -o "$file" <<< "$body"
      [[ -z "$2" ]] && cd /tmp && exec "$HELP_BROWSER" "$file"
      return 0
    fi
    pandoc -f gfm -s --metadata title="$title" \
      -t plain <<< "$body" | "$PAGER"
    return 0
  fi
  echo -e "$title\n\n$body" | "$PAGER"
}

_help_title() {
  _filter "$@" && return $?;
  local name="$1"
  while IFS= read -r line; do
    [[ $line =~ ^[:space]*$ ]] && continue
    [[ $line =~ ^#\ (.+) ]] && echo "${BASH_REMATCH[1]}" && return 0
    return 1
  done <<< "${HELP[$name]}"
}

# -------------------------- readme command --------------------------

HELP[readme]='
## Generate `README.md` File

```
'"$EXE"' readme > README.md
```

The `readme` command will output the embedded help documentation in raw
GitHub Flavored Markdown suitable for use as a `README.md` file on
GitHub or similar hosting service.'

command_readme() {
  _trim "${HELP[main]}"
  echo
  while IFS= read -r name; do
    [[ $name = main ]] && continue
    body=$(_trim "${HELP[$name]}")
    [[ $body =~ ^\# ]] || body="## The \`$name\` Command"$'\n\n'$body
    printf "%s\n\n" "$body"
  done < <(printf "%s\n" "${!HELP[@]}" | LC_COLLATE=C sort)
  echo -e "----\n\n*Autogenerated $(date)*\n"
}

# -------------------------- config command --------------------------

HELP[config]='

```
'"$EXE"' config
'"$EXE"' config KEY
'"$EXE"' config KEY VALUE
'"$EXE"' config KEY ""
'"$EXE"' config keys
'"$EXE"' config val[ues]
'"$EXE"' config dir[ectory]
'"$EXE"' config path [file]
'"$EXE"' config edit [file]
'"$EXE"' config del[ete]
```

The `config` command is for reading, writing, and displaying standard
open desktop configuration properties. Pass an empty string to delete
a property.

### Arguments

With no arguments outputs all the currently cached configuration
settings.

With a single KEY argument fetches the value for that key and outputs
it unless it is one of the following special (reserved) key names:

* `dir*` full path to config directory
* `path` full path to specific config file (default: `values`) 
* `edit` opens config file in editor (default: `editor` or `$EDITOR)
* `keys` output the configuration keys, one per line
* `val*` output the configuration values, one per line
* `del*` if key argument then delete a specific key, otherwise prompt

With more than one argument the remaining arguments after the KEY will
be combined into the VALUE and written to a `values` file in the
configuration directory. 

### Configuration Directory

The configuration directory path relies on the following environment
variables:

* `EXE` - defaults to name of currently running command ('"$EXE"')
* `HOME` - checked for `$HOME/.config/$EXE/values`
* `XDG_CONFIG_HOME` - overrides `$HOME/.config`
* `CONFIG_DIR` - full path to directory containing `values` file

The `CONFIG_DIR` always takes priority over anything else if set, but is
never implied. If the directory does not exist it will be created the
first time a value is set.

### Configuration `values` File Format

The file (which is almost always located at
`~/.config/'"$EXE"'/values`) uses the simplest possible format to
facilitate standard UNIX parsing and filtering with any number of
existing tools (and no `jq` dependency).

* One KEY=VALUE per line
* KEYs may be anything but the equal sign (`=`)
* VALUEs may be anything but line returns must be escaped

Note that this is *not* the same as Java properties and other similar
format. It is designed for ultimate simplicity, efficiency, and
portability.'

command_config() {
  case $1 in 
    dir*) shift; _config_dir  "$@"; return $? ;;
    path) shift; _config_path "$@"; return $? ;;
    edit) shift; _config_edit "$@"; return $? ;;
    del*) shift; _config_del  "$@"; return $? ;;
    keys) shift; _config_keys "$@"; return $? ;;
    val*) shift; _config_vals "$@"; return $? ;;
  esac
  case $# in
    0) _config_dump ;; 
    1) _config_get "$@" ;;
    *) _config_set "$@" ;;
  esac
}

_config_edit() {
  : "${CONFIG[editor]:="${EDITOR:=vi}"}"
  exec "${CONFIG[editor]}" "$(_config_path "${1:-values}")"
}

_config_del() {
  if [[ -z "$1" ]];then
    select key in "${!CONFIG[@]}"; do
      _config_del "$key"
      return $? 
    done
  fi
  _config_set "$1" ''
}

_config_keys() { printf "%s\n" "${!CONFIG[@]}"; }

_config_vals() { printf "%s\n" "${CONFIG[@]}"; }

_config_dir() {
  local dir="$HOME/.config/$EXE"
  [[ -n "$XDG_CONFIG_HOME" ]] && dir="$XDG_CONFIG_HOME/$EXE" 
  [[ -n "$CONFIG_DIR" ]] && dir="$CONFIG_DIR"
  [[ -n "$1" ]] && echo "$dir/$1" && return 0
  printf "%s" "$dir"
  [[ -t 1 ]] && echo
}

_config_path() { 
  local file=${1:-values}
  printf "%s/%s" "$(_config_dir)" "$file"
  [[ -t 1 ]] && echo
}

_config_set() {
  local key="$1"; shift; local val="$*"
  val="${val//$'\n'/\\n}"
  CONFIG["$key"]="$val"
  _config_write
}

_config_get() { 
  printf "${CONFIG[$1]}"
  [[ -t 1 ]] && echo
}

_config_read() {
  local values="$(_config_path)"
  [[ -r "$values" ]] || return 0
  while IFS= read -r line; do
    [[ $line =~ ^([^=]+)=(.+)$ ]] || continue
    CONFIG["${BASH_REMATCH[1]}"]="${BASH_REMATCH[2]}"
  done < "$values"
}

_config_write() {
  local dir="$(_config_dir)"
  mkdir -p "$dir"
  _config_dump > "$dir/values"
}

_config_dump() {
  (( ${#CONFIG[@]} == 0 )) && return 0
  paste -d=\
    <(printf "%s\n" "${!CONFIG[@]}") \
    <(printf "%s\n" "${CONFIG[@]}")
}

# --------------------------- json command ---------------------------

HELP[json]='
## Convert to JSON String

```
'"$EXE"' json STRING
'"$EXE"' json <<< STRING
'"$EXE"' json < FILE
'"$EXE"' json < <(COMMAND)
```

Converts input into JSON string using `jq` (if found) containing only
escaped (`\\n`) line returns.'

command_json() { _jsonstr "$@"; }

_jsonstr() {
  _buffer "$@" && return $?
  jq -MRsc <<< "$1"
}

# ----------------------------- utilities ----------------------------

_reduce() {
  local -n name="${1:?"name of array required"}"
  while IFS= read -r key; do
    [[ $key =~ $2 ]] && echo "$key"
  done < <(printf "%s\n" "${name[@]}")
}

_trim() {
  local it="${1#"${1%%[![:space:]]*}"}"
  echo -e "${it%"${it##*[![:space:]]}"}"
}

_have(){ type "$1" &>/dev/null; }

_checkdep() {
  _have "$1" && return 0
  echo "'$EXE' depends on '$1' for this, but not found"
  return 1
}

_filter(){
  [[ -n "$1" ]] && return 1
  while IFS= read -ra args; do
    "${FUNCNAME[1]}" "${args[@]}"
  done
}

_buffer() {
  [[ -n "$1" ]] && return 1
  "${FUNCNAME[1]}" "$(</dev/stdin)"
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ command_ ]] || continue
  COMMANDS+=( "${line##declare -f command_}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" && ${c:0:1} != _ ]] && echo "$c"
  done
  exit
fi

_config_read
_initialize

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "command_$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare cmd="$1"; shift
  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$cmd" ]]; then
      "command_$cmd" "$@"
      exit $?
    fi
  done
fi

command_usage "$@"
